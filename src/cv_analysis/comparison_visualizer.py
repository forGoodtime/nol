"""
–ö–æ–º–ø–∞—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ CV –∏ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import cv2
import numpy as np
from typing import Dict, List, Tuple, Optional, Union
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
import json
from pathlib import Path
import logging

from .damage_detector import DamageRegion, DamageDetectorCV
from .visual_analyzer import VisualAnalyzer

logger = logging.getLogger(__name__)


class ComparisonVisualizer:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ CV –∏ ML –∞–Ω–∞–ª–∏–∑–∞
    """
    
    def __init__(self):
        self.cv_detector = DamageDetectorCV()
        self.visual_analyzer = VisualAnalyzer()
        
        # –ú–∞–ø–ø–∏–Ω–≥ —É—Ä–æ–≤–Ω–µ–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
        self.damage_level_names = {
            0: "–ù–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π",
            1: "–õ–µ–≥–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è",
            2: "–°—Ä–µ–¥–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è", 
            3: "–°–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"
        }
        
    def analyze_with_both_methods(self, image: Union[np.ndarray, str, Path],
                                 ml_model_path: Optional[str] = None) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é CV –∏ ML –º–µ—Ç–æ–¥–æ–≤
        
        Args:
            image: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            ml_model_path: –ø—É—Ç—å –∫ ML –º–æ–¥–µ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã CV –∏ ML –∞–Ω–∞–ª–∏–∑–∞
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if isinstance(image, (str, Path)):
            img_array = cv2.imread(str(image))
            if img_array is None:
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image}")
        else:
            img_array = image.copy()
        
        # CV –∞–Ω–∞–ª–∏–∑
        logger.info("–ó–∞–ø—É—Å–∫ CV –∞–Ω–∞–ª–∏–∑–∞...")
        cv_results = self.cv_detector.analyze_image(img_array)
        
        # ML –∞–Ω–∞–ª–∏–∑ (–º–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)
        logger.info("–ó–∞–ø—É—Å–∫ ML –∞–Ω–∞–ª–∏–∑–∞...")
        if ml_model_path and Path(ml_model_path).exists():
            ml_results = self._run_ml_analysis(img_array, ml_model_path)
        else:
            ml_results = self._mock_ml_analysis(img_array)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        comparison = self._compare_results(cv_results, ml_results)
        
        return {
            'cv_results': cv_results,
            'ml_results': ml_results,
            'comparison': comparison,
            'image_shape': img_array.shape
        }
    
    def _run_ml_analysis(self, image: np.ndarray, model_path: str) -> Dict:
        """
        –ó–∞–ø—É—Å–∫ ML –∞–Ω–∞–ª–∏–∑–∞ —Å —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é
        """
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ–π ML –º–æ–¥–µ–ª—å—é
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        return self._mock_ml_analysis(image)
    
    def _mock_ml_analysis(self, image: np.ndarray) -> Dict:
        """
        –ò–º–∏—Ç–∞—Ü–∏—è ML –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        """
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        
        # –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        mean_intensity = np.mean(gray)
        std_intensity = np.std(gray)
        laplacian_var = cv2.Laplacian(gray, cv2.CV_64F).var()
        
        # –õ–æ–≥–∏–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏
        if std_intensity < 15 and mean_intensity > 100:
            damage_level = 0
            confidence = 0.92
            damage_types = []
        elif laplacian_var > 800:  # –í—ã—Å–æ–∫–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è = –º–Ω–æ–≥–æ –¥–µ—Ç–∞–ª–µ–π/–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
            damage_level = 3
            confidence = 0.87
            damage_types = ["severe_damage", "missing_part"]
        elif mean_intensity < 80:  # –¢–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
            damage_level = 2
            confidence = 0.75
            damage_types = ["rust", "dent"]
        else:
            damage_level = 1
            confidence = 0.68
            damage_types = ["light_scratches"]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ bounding boxes
        h, w = image.shape[:2]
        bboxes = []
        
        if damage_level > 0:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 1-3 —Å–ª—É—á–∞–π–Ω—ã—Ö bbox'–∞
            n_boxes = min(damage_level, 3)
            for i in range(n_boxes):
                x = np.random.randint(w // 4, 3 * w // 4)
                y = np.random.randint(h // 4, 3 * h // 4)
                box_w = np.random.randint(50, min(200, w - x))
                box_h = np.random.randint(50, min(200, h - y))
                
                bboxes.append({
                    'bbox': [x, y, box_w, box_h],
                    'confidence': confidence + np.random.uniform(-0.1, 0.1),
                    'class': damage_types[i % len(damage_types)] if damage_types else 'damage'
                })
        
        return {
            'damage_level': damage_level,
            'confidence': confidence,
            'damage_types': damage_types,
            'bboxes': bboxes,
            'processing_time': np.random.uniform(0.05, 0.2)
        }
    
    def _compare_results(self, cv_results: Dict, ml_results: Dict) -> Dict:
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ CV –∏ ML –∞–Ω–∞–ª–∏–∑–∞
        """
        cv_level = cv_results['overall_damage_level']
        ml_level = ml_results['damage_level']
        
        # –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω–µ–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
        level_agreement = cv_level == ml_level
        level_difference = abs(cv_level - ml_level)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
        cv_regions_count = len(cv_results['damage_regions'])
        ml_regions_count = len(ml_results.get('bboxes', []))
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
        cv_types = set()
        for region in cv_results['damage_regions']:
            damage_type = region.damage_type
            if 'rust' in damage_type:
                cv_types.add('rust')
            else:
                cv_types.add(damage_type)
        
        ml_types = set(ml_results.get('damage_types', []))
        
        # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
        common_types = cv_types.intersection(ml_types)
        type_agreement = len(common_types) / max(len(cv_types.union(ml_types)), 1)
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        if level_agreement and type_agreement > 0.5:
            agreement_status = "high"
        elif level_difference <= 1 and type_agreement > 0.3:
            agreement_status = "medium"
        else:
            agreement_status = "low"
        
        return {
            'level_agreement': level_agreement,
            'level_difference': level_difference,
            'agreement_status': agreement_status,
            'cv_regions_count': cv_regions_count,
            'ml_regions_count': ml_regions_count,
            'cv_damage_types': list(cv_types),
            'ml_damage_types': list(ml_types),
            'common_damage_types': list(common_types),
            'type_agreement_score': type_agreement,
            'recommendations': self._generate_recommendations(cv_results, ml_results, agreement_status)
        }
    
    def _generate_recommendations(self, cv_results: Dict, ml_results: Dict, 
                                agreement_status: str) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        recommendations = []
        
        cv_level = cv_results['overall_damage_level']
        ml_level = ml_results['damage_level']
        cv_conf = np.mean(cv_results.get('confidence_scores', [0.5]))
        ml_conf = ml_results.get('confidence', 0.5)
        
        if agreement_status == "high":
            recommendations.append("‚úÖ CV –∏ ML –º–µ—Ç–æ–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            
            if cv_level > 2:
                recommendations.append("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä")
            elif cv_level > 0:
                recommendations.append("üí° –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞")
        
        elif agreement_status == "medium":
            recommendations.append("‚ö†Ô∏è CV –∏ ML –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            
            if abs(cv_level - ml_level) == 1:
                recommendations.append("üìä –ù–µ–±–æ–ª—å—à–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –æ—Ü–µ–Ω–∫–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏")
            
            if cv_conf < 0.6 or ml_conf < 0.6:
                recommendations.append("üîç –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        
        else:  # low agreement
            recommendations.append("‚ùå –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É CV –∏ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
            recommendations.append("üî¨ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            
            if cv_level > ml_level + 1:
                recommendations.append("üîç CV –º–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–∏–ª –±–æ–ª—å—à–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π —á–µ–º ML")
            elif ml_level > cv_level + 1:
                recommendations.append("ü§ñ ML –º–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if len(cv_results['damage_regions']) > 10:
            recommendations.append("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±–ª–∞—Å—Ç–µ–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
        
        if cv_results['total_damaged_area'] > cv_results['image_size'][0] * cv_results['image_size'][1] * 0.1:
            recommendations.append("üìè –ë–æ–ª—å—à–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        return recommendations
    
    def create_side_by_side_comparison(self, image: np.ndarray, 
                                      combined_results: Dict) -> Figure:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ CV –∏ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        fig, axes = plt.subplots(1, 3, figsize=(18, 8))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ RGB
        original_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        
        cv_results = combined_results['cv_results']
        ml_results = combined_results['ml_results']
        comparison = combined_results['comparison']
        
        # 1. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        axes[0].imshow(original_rgb)
        axes[0].set_title('–û—Ä–∏–≥–∏–Ω–∞–ª', fontsize=16, fontweight='bold')
        axes[0].axis('off')
        
        # 2. CV –∞–Ω–∞–ª–∏–∑
        cv_overlay = self.visual_analyzer.create_analysis_overlay(image, cv_results)
        cv_overlay_rgb = cv2.cvtColor(cv_overlay, cv2.COLOR_BGR2RGB)
        axes[1].imshow(cv_overlay_rgb)
        
        cv_title = f'Computer Vision\nLevel: {cv_results["overall_damage_level"]} | Regions: {len(cv_results["damage_regions"])}'
        axes[1].set_title(cv_title, fontsize=16, fontweight='bold', color='blue')
        axes[1].axis('off')
        
        # 3. ML –∞–Ω–∞–ª–∏–∑
        ml_overlay = self.visual_analyzer._create_ml_overlay(image, ml_results)
        ml_overlay_rgb = cv2.cvtColor(ml_overlay, cv2.COLOR_BGR2RGB)
        axes[2].imshow(ml_overlay_rgb)
        
        ml_title = f'Machine Learning\nLevel: {ml_results["damage_level"]} | Conf: {ml_results["confidence"]:.2f}'
        axes[2].set_title(ml_title, fontsize=16, fontweight='bold', color='green')
        axes[2].axis('off')
        
        # –û–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        agreement_color = {'high': 'green', 'medium': 'orange', 'low': 'red'}
        agreement_text = f'Agreement: {comparison["agreement_status"].upper()}'
        
        fig.suptitle(f'CV vs ML Damage Detection Analysis | {agreement_text}', 
                    fontsize=20, fontweight='bold', 
                    color=agreement_color[comparison['agreement_status']])
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–Ω–∏–∑—É
        info_lines = [
            f"CV: {comparison['cv_regions_count']} regions, Types: {', '.join(comparison['cv_damage_types'])}",
            f"ML: {comparison['ml_regions_count']} regions, Types: {', '.join(comparison['ml_damage_types'])}",
            f"Common types: {', '.join(comparison['common_damage_types']) if comparison['common_damage_types'] else 'None'}"
        ]
        
        info_text = ' | '.join(info_lines)
        fig.text(0.5, 0.02, info_text, ha='center', fontsize=12, 
                bbox=dict(boxstyle="round,pad=0.3", facecolor="lightgray"))
        
        plt.tight_layout()
        plt.subplots_adjust(top=0.88, bottom=0.12)
        
        return fig
    
    def create_detailed_report(self, combined_results: Dict) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        """
        cv_results = combined_results['cv_results']
        ml_results = combined_results['ml_results']
        comparison = combined_results['comparison']
        
        report_lines = []
        report_lines.append("=" * 80)
        report_lines.append("–î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢: –°–†–ê–í–ù–ï–ù–ò–ï CV –ò ML –ê–ù–ê–õ–ò–ó–ê")
        report_lines.append("=" * 80)
        report_lines.append("")
        
        # –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        report_lines.append("–û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        report_lines.append(f"  CV —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {cv_results['overall_damage_level']} - {self.damage_level_names[cv_results['overall_damage_level']]}")
        report_lines.append(f"  ML —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {ml_results['damage_level']} - {self.damage_level_names[ml_results['damage_level']]}")
        report_lines.append(f"  –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {comparison['agreement_status'].upper()}")
        report_lines.append("")
        
        # CV –¥–µ—Ç–∞–ª–∏
        report_lines.append("COMPUTER VISION –ê–ù–ê–õ–ò–ó:")
        report_lines.append(f"  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(cv_results['damage_regions'])}")
        report_lines.append(f"  –û–±—â–∞—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å: {cv_results['total_damaged_area']} –ø–∏–∫—Å–µ–ª–µ–π")
        
        damage_counts = cv_results['damage_counts']
        report_lines.append("  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:")
        report_lines.append(f"    ‚Ä¢ –†–∂–∞–≤—á–∏–Ω–∞: {damage_counts['rust']}")
        report_lines.append(f"    ‚Ä¢ –í–º—è—Ç–∏–Ω—ã: {damage_counts['dents']}")
        report_lines.append(f"    ‚Ä¢ –¶–∞—Ä–∞–ø–∏–Ω—ã: {damage_counts['scratches']}")
        report_lines.append(f"    ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —á–∞—Å—Ç–∏: {damage_counts['missing_parts']}")
        
        if cv_results['confidence_scores']:
            avg_conf = np.mean(cv_results['confidence_scores'])
            report_lines.append(f"  –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_conf:.3f}")
        report_lines.append("")
        
        # ML –¥–µ—Ç–∞–ª–∏
        report_lines.append("MACHINE LEARNING –ê–ù–ê–õ–ò–ó:")
        report_lines.append(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_results['confidence']:.3f}")
        report_lines.append(f"  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {ml_results.get('processing_time', 0):.3f} —Å–µ–∫")
        report_lines.append(f"  –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã: {', '.join(ml_results.get('damage_types', []))}")
        
        if ml_results.get('bboxes'):
            report_lines.append(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ bounding boxes: {len(ml_results['bboxes'])}")
            for i, bbox in enumerate(ml_results['bboxes'][:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                report_lines.append(f"    Box {i+1}: {bbox['class']} (conf: {bbox['confidence']:.3f})")
        report_lines.append("")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        report_lines.append("–ê–ù–ê–õ–ò–ó –°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–ò:")
        report_lines.append(f"  –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π: {'–î–ê' if comparison['level_agreement'] else '–ù–ï–¢'}")
        report_lines.append(f"  –†–∞–∑–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω–µ–π: {comparison['level_difference']}")
        report_lines.append(f"  –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤: {comparison['type_agreement_score']:.3f}")
        report_lines.append(f"  –û–±—â–∏–µ —Ç–∏–ø—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {', '.join(comparison['common_damage_types']) if comparison['common_damage_types'] else '–ù–µ—Ç'}")
        report_lines.append("")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report_lines.append("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in comparison['recommendations']:
            report_lines.append(f"  {rec}")
        
        report_lines.append("")
        report_lines.append("=" * 80)
        
        return "\\n".join(report_lines)
    
    def save_comparison_results(self, output_dir: Union[str, Path], 
                              filename_base: str, image: np.ndarray,
                              combined_results: Dict) -> Dict[str, str]:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        """
        output_dir = Path(output_dir)
        output_dir.mkdir(parents=True, exist_ok=True)
        
        saved_files = {}
        
        # 1. –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        comparison_fig = self.create_side_by_side_comparison(image, combined_results)
        comparison_path = output_dir / f'{filename_base}_cv_ml_comparison.png'
        comparison_fig.savefig(str(comparison_path), dpi=300, bbox_inches='tight')
        plt.close(comparison_fig)
        saved_files['comparison'] = str(comparison_path)
        
        # 2. –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report = self.create_detailed_report(combined_results)
        report_path = output_dir / f'{filename_base}_detailed_report.txt'
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report)
        saved_files['report'] = str(report_path)
        
        # 3. JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        json_path = output_dir / f'{filename_base}_results.json'
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON (—É–±–∏—Ä–∞–µ–º numpy –æ–±—ä–µ–∫—Ç—ã)
        json_data = self._prepare_for_json(combined_results)
        
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(json_data, f, indent=2, ensure_ascii=False)
        saved_files['json'] = str(json_path)
        
        # 4. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ CV
        cv_files = self.visual_analyzer.save_analysis_results(
            output_dir, f'{filename_base}_cv', image, 
            combined_results['cv_results'], combined_results['ml_results']
        )
        saved_files.update(cv_files)
        
        return saved_files
    
    def _prepare_for_json(self, data: Dict) -> Dict:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ JSON
        """
        def convert_item(item):
            if isinstance(item, np.ndarray):
                return item.tolist()
            elif isinstance(item, np.integer):
                return int(item)
            elif isinstance(item, np.floating):
                return float(item)
            elif isinstance(item, DamageRegion):
                return {
                    'bbox': item.bbox,
                    'damage_type': item.damage_type,
                    'confidence': float(item.confidence),
                    'severity': int(item.severity),
                    'area': int(item.area)
                }
            elif isinstance(item, dict):
                return {key: convert_item(value) for key, value in item.items()}
            elif isinstance(item, list):
                return [convert_item(x) for x in item]
            else:
                return item
        
        return convert_item(data)
