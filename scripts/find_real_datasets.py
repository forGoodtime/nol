#!/usr/bin/env python3
"""–ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""

import os
import requests
import json
from pathlib import Path
import zipfile
import subprocess

def find_available_datasets():
    """–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    
    print("üîç –ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...")
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
    alternative_sources = [
        {
            'name': 'COCO Car Damage Dataset',
            'source': 'Roboflow Universe',
            'url': 'https://universe.roboflow.com/search?q=car%20damage',
            'description': '–î–∞—Ç–∞—Å–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ COCO –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
            'format': 'COCO JSON'
        },
        {
            'name': 'Car Damage Detection (YOLOv8)',
            'source': 'Roboflow',
            'url': 'https://universe.roboflow.com/roboflow-jvuqo/car-damage-segmentation',
            'description': '–ì–æ—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è YOLOv8',
            'format': 'YOLOv8'
        },
        {
            'name': 'Vehicle Damage Dataset',
            'source': 'Kaggle',
            'url': 'https://www.kaggle.com/datasets/anujms/vehicle-damage-dataset',
            'description': '–î–∞—Ç–∞—Å–µ—Ç —Å Kaggle',
            'format': 'Images + Labels'
        },
        {
            'name': 'Car Accident Dataset',
            'source': 'GitHub',
            'url': 'https://github.com/topics/car-damage-detection',
            'description': '–û—Ç–∫—Ä—ã—Ç—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å –¥–∞—Ç–∞—Å–µ—Ç–∞–º–∏',
            'format': 'Various'
        }
    ]
    
    print("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤:")
    for i, source in enumerate(alternative_sources, 1):
        print(f"\n{i}. {source['name']}")
        print(f"   üìç –ò—Å—Ç–æ—á–Ω–∏–∫: {source['source']}")
        print(f"   üîó URL: {source['url']}")
        print(f"   üìù {source['description']}")
        print(f"   üìÅ –§–æ—Ä–º–∞—Ç: {source['format']}")
    
    return alternative_sources

def download_roboflow_dataset(project_dir: str):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å Roboflow (—Ç—Ä–µ–±—É–µ—Ç API key)"""
    
    print("\nü§ñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ —Å Roboflow:")
    print("1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://universe.roboflow.com")
    print("2. –ù–∞–π–¥–∏—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç 'car damage' –∏–ª–∏ 'vehicle damage'")
    print("3. –°–æ–∑–¥–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
    print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞")
    
    roboflow_script = """
# –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å Roboflow:
# pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="YOUR_API_KEY")
project = rf.workspace("workspace-name").project("project-name")
dataset = project.version(1).download("yolov8")
"""
    
    script_path = os.path.join(project_dir, "scripts", "download_roboflow.py")
    with open(script_path, 'w') as f:
        f.write(roboflow_script)
    
    print(f"üìù –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω —Å–∫—Ä–∏–ø—Ç–∞: {script_path}")
    
    return script_path

def create_enhanced_synthetic_dataset(project_dir: str, num_images: int = 5000):
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    
    print(f"\nüé® –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ ({num_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
    
    import cv2
    import numpy as np
    import random
    import yaml
    
    dataset_dir = os.path.join(project_dir, "data", "enhanced_synthetic_car_damage")
    train_dir = os.path.join(dataset_dir, "images", "train")
    val_dir = os.path.join(dataset_dir, "images", "val")
    train_labels_dir = os.path.join(dataset_dir, "labels", "train")
    val_labels_dir = os.path.join(dataset_dir, "labels", "val")
    
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs(train_dir, exist_ok=True)
    os.makedirs(val_dir, exist_ok=True)
    os.makedirs(train_labels_dir, exist_ok=True)
    os.makedirs(val_labels_dir, exist_ok=True)
    
    # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    car_colors = [
        (255, 255, 255),  # –ë–µ–ª—ã–π
        (0, 0, 0),        # –ß—ë—Ä–Ω—ã–π
        (128, 128, 128),  # –°–µ—Ä—ã–π
        (255, 0, 0),      # –ö—Ä–∞—Å–Ω—ã–π
        (0, 0, 255),      # –°–∏–Ω–∏–π
        (0, 128, 0),      # –ó–µ–ª—ë–Ω—ã–π
        (255, 255, 0),    # –ñ—ë–ª—Ç—ã–π
        (128, 0, 128),    # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
    ]
    
    # –¢–∏–ø—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π —Å –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    damage_types = {
        1: {  # rust
            'name': 'rust',
            'color_range': [(0, 100, 150), (50, 150, 200)],
            'size_range': (15, 60),
            'probability': 0.3
        },
        2: {  # dent
            'name': 'dent',
            'color_range': [(30, 30, 30), (80, 80, 80)],
            'size_range': (25, 80),
            'probability': 0.25
        },
        3: {  # scratch
            'name': 'scratch',
            'color_range': [(150, 150, 150), (220, 220, 220)],
            'size_range': (40, 120),
            'probability': 0.25
        },
        4: {  # severe_damage
            'name': 'severe_damage',
            'color_range': [(0, 0, 200), (100, 100, 255)],
            'size_range': (60, 150),
            'probability': 0.15
        },
        5: {  # missing_part
            'name': 'missing_part',
            'color_range': [(0, 0, 0), (50, 50, 50)],
            'size_range': (30, 100),
            'probability': 0.1
        }
    }
    
    print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –†–∞–∑–±–∏–µ–Ω–∏–µ train/val
    train_count = int(num_images * 0.8)
    val_count = num_images - train_count
    
    for i in range(num_images):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å (train –∏–ª–∏ val)
        if i < train_count:
            img_dir = train_dir
            labels_dir = train_labels_dir
            prefix = "train"
        else:
            img_dir = val_dir
            labels_dir = val_labels_dir
            prefix = "val"
        
        # –°–æ–∑–¥–∞—ë–º –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_width, img_height = 640, 480
        
        # –°–æ–∑–¥–∞—ë–º —Ñ–æ–Ω (–¥–æ—Ä–æ–≥–∞, –ø–∞—Ä–∫–æ–≤–∫–∞)
        background_color = random.choice([
            (100, 100, 100),  # –ê—Å—Ñ–∞–ª—å—Ç
            (150, 150, 150),  # –ë–µ—Ç–æ–Ω
            (120, 120, 120),  # –ì—Ä—è–∑—å
        ])
        image = np.full((img_height, img_width, 3), background_color, dtype=np.uint8)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –∫ —Ñ–æ–Ω—É
        noise = np.random.normal(0, 20, (img_height, img_width, 3))
        image = np.clip(image + noise, 0, 255).astype(np.uint8)
        
        # –†–∏—Å—É–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ
        car_color = random.choice(car_colors)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—Ä–ø—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        car_rect = (80, 120, 480, 240)  # x, y, width, height
        cv2.rectangle(image, (car_rect[0], car_rect[1]), 
                     (car_rect[0] + car_rect[2], car_rect[1] + car_rect[3]), 
                     car_color, -1)
        
        # –û–∫–Ω–∞
        cv2.rectangle(image, (120, 140), (200, 200), (200, 200, 255), -1)  # –ü–µ—Ä–µ–¥–Ω–µ–µ
        cv2.rectangle(image, (420, 140), (500, 200), (200, 200, 255), -1)  # –ó–∞–¥–Ω–µ–µ
        
        # –ö–æ–ª—ë—Å–∞
        cv2.circle(image, (140, 300), 30, (0, 0, 0), -1)     # –ü–µ—Ä–µ–¥–Ω–µ–µ –ª–µ–≤–æ–µ
        cv2.circle(image, (500, 300), 30, (0, 0, 0), -1)     # –ó–∞–¥–Ω–µ–µ –ª–µ–≤–æ–µ
        
        # –§–∞—Ä—ã
        cv2.circle(image, (70, 180), 15, (255, 255, 200), -1)  # –ü–µ—Ä–µ–¥–Ω—è—è
        cv2.circle(image, (570, 180), 15, (255, 100, 100), -1)  # –ó–∞–¥–Ω—è—è
        
        annotations = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
        num_damages = np.random.poisson(1.5)  # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
        num_damages = max(0, min(num_damages, 4))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-4
        
        for _ in range(num_damages):
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            damage_probs = [damage_types[dt]['probability'] for dt in damage_types.keys()]
            damage_type = np.random.choice(list(damage_types.keys()), p=np.array(damage_probs)/sum(damage_probs))
            
            damage_info = damage_types[damage_type]
            
            # –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            margin = 20
            x = np.random.randint(car_rect[0] + margin, car_rect[0] + car_rect[2] - margin - 50)
            y = np.random.randint(car_rect[1] + margin, car_rect[1] + car_rect[3] - margin - 40)
            
            size_min, size_max = damage_info['size_range']
            w = np.random.randint(size_min, size_max)
            h = np.random.randint(size_min//2, size_max//2)
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ bbox –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
            x = max(0, min(x, img_width - w))
            y = max(0, min(y, img_height - h))
            w = min(w, img_width - x)
            h = min(h, img_height - y)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
            color_min, color_max = damage_info['color_range']
            color = [
                np.random.randint(color_min[0], color_max[0]),
                np.random.randint(color_min[1], color_max[1]),
                np.random.randint(color_min[2], color_max[2])
            ]
            
            # –†–∏—Å—É–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if damage_type == 1:  # rust - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—è—Ç–Ω–∞
                cv2.ellipse(image, (x+w//2, y+h//2), (w//2, h//2), 
                           np.random.randint(0, 360), 0, 360, color, -1)
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É —Ä–∂–∞–≤—á–∏–Ω—ã
                for _ in range(random.randint(3, 8)):
                    px = x + random.randint(0, w)
                    py = y + random.randint(0, h)
                    cv2.circle(image, (px, py), random.randint(2, 5), color, -1)
                    
            elif damage_type == 2:  # dent - –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ –∫—Ä—É–≥–∏
                cv2.ellipse(image, (x+w//2, y+h//2), (w//2, h//2), 0, 0, 360, color, -1)
                # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–∫ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤–º—è—Ç–∏–Ω—ã
                lighter_color = [min(255, c + 50) for c in color]
                cv2.ellipse(image, (x+w//3, y+h//3), (w//4, h//4), 0, 0, 360, lighter_color, -1)
                
            elif damage_type == 3:  # scratch - –ª–∏–Ω–∏–∏
                thickness = random.randint(2, 5)
                if random.random() > 0.5:  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Ü–∞—Ä–∞–ø–∏–Ω–∞
                    cv2.line(image, (x, y+h//2), (x+w, y+h//2), color, thickness)
                else:  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ü–∞—Ä–∞–ø–∏–Ω–∞
                    cv2.line(image, (x+w//2, y), (x+w//2, y+h), color, thickness)
                    
            elif damage_type == 4:  # severe_damage - –∫—Ä—É–ø–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
                # –°–æ–∑–¥–∞—ë–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
                points = []
                for _ in range(random.randint(5, 8)):
                    px = x + random.randint(0, w)
                    py = y + random.randint(0, h)
                    points.append([px, py])
                cv2.fillPoly(image, [np.array(points)], color)
                
            elif damage_type == 5:  # missing_part - —á—ë—Ä–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
                cv2.rectangle(image, (x, y), (x+w, y+h), color, -1)
                # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –¥–µ—Ç–∞–ª–∏
                cv2.rectangle(image, (x, y), (x+w, y+h), (100, 100, 100), 2)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ YOLO
            x_center = (x + w/2) / img_width
            y_center = (y + h/2) / img_height
            width = w / img_width
            height = h / img_height
            
            annotations.append(f"{damage_type} {x_center:.6f} {y_center:.6f} {width:.6f} {height:.6f}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_filename = f"{prefix}_{i:06d}.jpg"
        img_path = os.path.join(img_dir, img_filename)
        cv2.imwrite(img_path, image)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        txt_filename = f"{prefix}_{i:06d}.txt"
        txt_path = os.path.join(labels_dir, txt_filename)
        with open(txt_path, 'w') as f:
            f.write('\n'.join(annotations))
        
        if (i + 1) % 500 == 0:
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ: {i + 1}/{num_images}")
    
    # –°–æ–∑–¥–∞—ë–º dataset.yaml
    dataset_config = {
        'path': dataset_dir,
        'train': 'images/train',
        'val': 'images/val',
        'nc': 6,
        'names': {
            0: 'no_damage',
            1: 'rust',
            2: 'dent',
            3: 'scratch', 
            4: 'severe_damage',
            5: 'missing_part'
        }
    }
    
    dataset_yaml_path = os.path.join(dataset_dir, "dataset.yaml")
    with open(dataset_yaml_path, 'w') as f:
        yaml.dump(dataset_config, f, default_flow_style=False)
    
    print(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω: {dataset_dir}")
    print(f"üìä Train: {train_count}, Val: {val_count}")
    print(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {dataset_yaml_path}")
    
    return dataset_yaml_path

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    project_dir = "/Users/bekzat/projects/AIinDrive"
    
    print("üöó –ü–æ–∏—Å–∫ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    print("=" * 70)
    
    # 1. –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    available_sources = find_available_datasets()
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å Roboflow
    roboflow_script = download_roboflow_dataset(project_dir)
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
    enhanced_dataset_yaml = create_enhanced_synthetic_dataset(project_dir, num_images=5000)
    
    print("\n" + "=" * 70)
    print("‚úÖ –ü–æ–∏—Å–∫ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:")
    print("1. üé® –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç –≥–æ—Ç–æ–≤ (5000 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
    print(f"   –ü—É—Ç—å: {enhanced_dataset_yaml}")
    
    print("\n2. ü§ñ –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ —Å Roboflow:")
    print("   - –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://universe.roboflow.com")
    print("   - –ù–∞–π–¥–∏—Ç–µ 'car damage detection' –¥–∞—Ç–∞—Å–µ—Ç")
    print(f"   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω: {roboflow_script}")
    
    print("\n3. üìä –î—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:")
    print("   - Kaggle: https://www.kaggle.com/search?q=car+damage")
    print("   - GitHub: https://github.com/topics/car-damage")
    
    print("\n4. üöÄ –î–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ:")
    print("   python scripts/train_on_enhanced_dataset.py")
    
    return enhanced_dataset_yaml

if __name__ == "__main__":
    enhanced_dataset_path = main()
