#!/usr/bin/env python3
"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –±–æ–ª—å—à–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ"""

import os
import sys
import cv2
import numpy as np
import json
from pathlib import Path
from datetime import datetime
from ultralytics import YOLO
import matplotlib.pyplot as plt
import matplotlib.patches as patches

def test_trained_model(model_path: str, test_images_dir: str, output_dir: str, confidence_threshold: float = 0.01):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_path}")
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤: {test_images_dir}")
    print(f"üéØ –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence_threshold}")
    
    # –°–æ–∑–¥–∞—ë–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.makedirs(output_dir, exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    if not os.path.exists(model_path):
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        return None
    
    model = YOLO(model_path)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    image_extensions = ['.jpg', '.jpeg', '.png', '.bmp']
    test_images = []
    
    if os.path.isdir(test_images_dir):
        for ext in image_extensions:
            test_images.extend([f for f in os.listdir(test_images_dir) 
                              if f.lower().endswith(ext.lower())])
    else:
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {test_images_dir}")
        return None
    
    if not test_images:
        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {test_images_dir}")
        return None
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(test_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
    damage_categories = {
        0: 'no_damage',
        1: 'rust',
        2: 'dent',
        3: 'scratch',
        4: 'severe_damage',
        5: 'missing_part'
    }
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    colors = {
        'no_damage': (0, 255, 0),      # –ó–µ–ª—ë–Ω—ã–π
        'rust': (0, 165, 255),         # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        'dent': (255, 0, 0),           # –°–∏–Ω–∏–π
        'scratch': (255, 255, 0),      # –ì–æ–ª—É–±–æ–π
        'severe_damage': (0, 0, 255),  # –ö—Ä–∞—Å–Ω—ã–π
        'missing_part': (128, 0, 128)  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
    }
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_results = {
        'model_path': model_path,
        'test_timestamp': datetime.now().isoformat(),
        'confidence_threshold': confidence_threshold,
        'total_images': len(test_images),
        'results': []
    }
    
    detection_stats = {cat: 0 for cat in damage_categories.values()}
    
    print(f"\nüîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    for i, image_name in enumerate(test_images):
        image_path = os.path.join(test_images_dir, image_name)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = cv2.imread(image_path)
        if image is None:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {image_name}")
            continue
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
        results = model(image_path, conf=confidence_threshold, iou=0.45)
        
        detections = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if results and len(results) > 0:
            for result in results:
                if result.boxes is not None:
                    boxes = result.boxes.xyxy.cpu().numpy()
                    confidences = result.boxes.conf.cpu().numpy()
                    classes = result.boxes.cls.cpu().numpy().astype(int)
                    
                    for box, conf, cls in zip(boxes, confidences, classes):
                        if cls in damage_categories:
                            category_name = damage_categories[cls]
                            detection_stats[category_name] += 1
                            
                            detection = {
                                'class': category_name,
                                'confidence': float(conf),
                                'bbox': [float(x) for x in box],
                                'class_id': int(cls)
                            }
                            detections.append(detection)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_result = {
            'image': image_name,
            'detections': detections,
            'total_detections': len(detections)
        }
        test_results['results'].append(image_result)
        
        # –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        if detections:
            visualized_image = visualize_detections(image, detections, colors)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            output_image_path = os.path.join(output_dir, f"detected_{image_name}")
            cv2.imwrite(output_image_path, visualized_image)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        if (i + 1) % 10 == 0 or i == len(test_images) - 1:
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i + 1}/{len(test_images)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_detections = sum(detection_stats.values())
    test_results['statistics'] = {
        'total_detections': total_detections,
        'detections_by_category': detection_stats,
        'images_with_detections': len([r for r in test_results['results'] if r['total_detections'] > 0])
    }
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"  –í—Å–µ–≥–æ –¥–µ—Ç–µ–∫—Ü–∏–π: {total_detections}")
    print(f"  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏: {test_results['statistics']['images_with_detections']}/{len(test_images)}")
    
    print(f"\nüìà –î–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category, count in detection_stats.items():
        percentage = (count / total_detections * 100) if total_detections > 0 else 0
        print(f"  {category}: {count} ({percentage:.1f}%)")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_file = os.path.join(output_dir, f"test_results_{confidence_threshold}.json")
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(test_results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
    
    # –°–æ–∑–¥–∞—ë–º —Å–≤–æ–¥–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    create_summary_visualization(test_results, output_dir)
    
    return test_results

def visualize_detections(image, detections, colors):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
    
    result_image = image.copy()
    
    for detection in detections:
        category = detection['class']
        confidence = detection['confidence']
        bbox = detection['bbox']
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bbox
        x1, y1, x2, y2 = [int(coord) for coord in bbox]
        
        # –¶–≤–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        color = colors.get(category, (255, 255, 255))
        
        # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        cv2.rectangle(result_image, (x1, y1), (x2, y2), color, 2)
        
        # –ü–æ–¥–ø–∏—Å—å
        label = f"{category} {confidence:.2f}"
        label_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.6, 2)[0]
        
        # –§–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        cv2.rectangle(result_image, 
                     (x1, y1 - label_size[1] - 10), 
                     (x1 + label_size[0], y1), 
                     color, -1)
        
        # –¢–µ–∫—Å—Ç
        cv2.putText(result_image, label, (x1, y1 - 5), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
    
    return result_image

def create_summary_visualization(test_results, output_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = list(test_results['statistics']['detections_by_category'].keys())
    counts = list(test_results['statistics']['detections_by_category'].values())
    
    bars1 = ax1.bar(categories, counts, color=['green', 'orange', 'blue', 'cyan', 'red', 'purple'])
    ax1.set_title('–î–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontsize=14)
    ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    ax1.tick_params(axis='x', rotation=45)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, count in zip(bars1, counts):
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                f'{count}', ha='center', va='bottom')
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    all_confidences = []
    for result in test_results['results']:
        for detection in result['detections']:
            all_confidences.append(detection['confidence'])
    
    if all_confidences:
        ax2.hist(all_confidences, bins=20, alpha=0.7, color='skyblue')
        ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–∫—Ü–∏–π', fontsize=14)
        ax2.set_xlabel('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
        ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    else:
        ax2.text(0.5, 0.5, '–ù–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–π', ha='center', va='center', transform=ax2.transAxes)
        ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–∫—Ü–∏–π', fontsize=14)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    detections_per_image = [result['total_detections'] for result in test_results['results']]
    ax3.hist(detections_per_image, bins=max(1, max(detections_per_image)) if detections_per_image else 1, 
             alpha=0.7, color='lightgreen')
    ax3.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', fontsize=14)
    ax3.set_xlabel('–î–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞
    ax4.axis('tight')
    ax4.axis('off')
    
    table_data = [
        ['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
        ['–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', test_results['total_images']],
        ['–í—Å–µ–≥–æ –¥–µ—Ç–µ–∫—Ü–∏–π', test_results['statistics']['total_detections']],
        ['–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏', test_results['statistics']['images_with_detections']],
        ['–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏', test_results['confidence_threshold']],
        ['–°—Ä–µ–¥–Ω–µ–µ –¥–µ—Ç–µ–∫—Ü–∏–π/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 
         f"{test_results['statistics']['total_detections'] / test_results['total_images']:.2f}"]
    ]
    
    table = ax4.table(cellText=table_data, 
                     cellLoc='center',
                     loc='center',
                     colWidths=[0.6, 0.4])
    table.auto_set_font_size(False)
    table.set_fontsize(11)
    table.scale(1, 2)
    ax4.set_title('–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', fontsize=14)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    summary_path = os.path.join(output_dir, 'test_summary_visualization.png')
    plt.savefig(summary_path, dpi=150, bbox_inches='tight')
    plt.close()
    
    print(f"üìä –°–≤–æ–¥–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: {summary_path}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    project_dir = "/Users/bekzat/projects/AIinDrive"
    
    # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º
    models_to_test = [
        {
            'name': 'Original Small Model (7 images)',
            'path': os.path.join(project_dir, 'results', 'yolo_training', 'damage_detection_v1', 'weights', 'best.pt')
        },
        {
            'name': 'Large Dataset Model (1000 images)',  
            'path': os.path.join(project_dir, 'results', 'large_dataset_training', 'car_damage_v2_1000imgs', 'weights', 'best.pt')
        }
    ]
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    test_directories = [
        {
            'name': 'Curated Real Images',
            'path': os.path.join(project_dir, 'data', 'curated')
        },
        {
            'name': 'Synthetic Test Images',
            'path': os.path.join(project_dir, 'data', 'synthetic_car_damage', 'images')
        }
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    confidence_thresholds = [0.001, 0.01, 0.05, 0.1, 0.25]
    
    for model_info in models_to_test:
        if not os.path.exists(model_info['path']):
            print(f"‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_info['name']} - {model_info['path']}")
            continue
        
        print(f"\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: {model_info['name']}")
        
        for test_dir_info in test_directories:
            if not os.path.exists(test_dir_info['path']):
                print(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {test_dir_info['name']}")
                continue
            
            print(f"\nüìÅ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {test_dir_info['name']}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            for conf_thresh in confidence_thresholds:
                output_dir = os.path.join(
                    project_dir, 'results', 'model_testing', 'comprehensive',
                    model_info['name'].replace(' ', '_').replace('(', '').replace(')', ''),
                    test_dir_info['name'].replace(' ', '_'),
                    f"conf_{conf_thresh}"
                )
                
                print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ—Ä–æ–≥–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {conf_thresh}")
                
                try:
                    results = test_trained_model(
                        model_info['path'], 
                        test_dir_info['path'], 
                        output_dir, 
                        conf_thresh
                    )
                    
                    if results:
                        total_detections = results['statistics']['total_detections']
                        if total_detections > 0:
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_detections} –¥–µ—Ç–µ–∫—Ü–∏–π")
                        else:
                            print(f"‚ùå –î–µ—Ç–µ–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                except Exception as e:
                    print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")

if __name__ == "__main__":
    main()
