#!/usr/bin/env python3
"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""

import os
import cv2
import numpy as np
from pathlib import Path
import matplotlib.pyplot as plt
from ultralytics import YOLO
import json
from datetime import datetime

def find_best_model(project_dir: str):
    """–ü–æ–∏—Å–∫ –ª—É—á—à–µ–π –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    
    results_dir = os.path.join(project_dir, "results", "yolo_training")
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    possible_paths = [
        os.path.join(results_dir, "damage_detection_v1", "weights", "best.pt"),
        os.path.join(results_dir, "damage_detection_v1", "weights", "last.pt")
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            return path
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ª—é–±—É—é –º–æ–¥–µ–ª—å –≤ results
    for root, dirs, files in os.walk(results_dir):
        for file in files:
            if file in ["best.pt", "last.pt"]:
                return os.path.join(root, file)
    
    return None

def test_model_on_images(model_path: str, test_dir: str, output_dir: str):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö"""
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_path}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    model = YOLO(model_path)
    
    # –°–æ–∑–¥–∞—ë–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.makedirs(output_dir, exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_files = [f for f in os.listdir(test_dir) 
                  if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    
    if not image_files:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(image_files)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    results_summary = {
        'model_path': model_path,
        'test_timestamp': datetime.now().isoformat(),
        'results': []
    }
    
    for img_file in image_files:
        img_path = os.path.join(test_dir, img_file)
        print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {img_file}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = cv2.imread(img_path)
        if image is None:
            continue
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        results = model(img_path, conf=0.25, iou=0.45)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        detections = []
        if results and len(results) > 0:
            result = results[0]
            
            if result.boxes is not None:
                boxes = result.boxes
                for i in range(len(boxes)):
                    box = boxes.xyxy[i].cpu().numpy()
                    conf = boxes.conf[i].cpu().numpy()
                    cls = int(boxes.cls[i].cpu().numpy())
                    
                    # –ò–º–µ–Ω–∞ –∫–ª–∞—Å—Å–æ–≤
                    class_names = {
                        0: 'no_damage',
                        1: 'rust',
                        2: 'dent',
                        3: 'scratch', 
                        4: 'severe_damage',
                        5: 'missing_part'
                    }
                    
                    class_name = class_names.get(cls, f'class_{cls}')
                    
                    detections.append({
                        'class': class_name,
                        'confidence': float(conf),
                        'bbox': box.tolist()
                    })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        img_result = {
            'image': img_file,
            'detections': detections,
            'total_detections': len(detections)
        }
        results_summary['results'].append(img_result)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        visualize_predictions(image, detections, img_file, output_dir)
        
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(detections)} –æ–±—ä–µ–∫—Ç–æ–≤")
        for det in detections:
            print(f"    - {det['class']}: {det['confidence']:.3f}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    summary_path = os.path.join(output_dir, 'test_results_summary.json')
    with open(summary_path, 'w', encoding='utf-8') as f:
        json.dump(results_summary, f, indent=2, ensure_ascii=False)
    
    print(f"üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {summary_path}")
    
    return results_summary

def visualize_predictions(image, detections, filename, output_dir):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR –≤ RGB
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    # –°–æ–∑–¥–∞—ë–º —Ñ–∏–≥—É—Ä—É
    fig, ax = plt.subplots(1, 1, figsize=(12, 8))
    ax.imshow(image_rgb)
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤
    colors = {
        'no_damage': 'green',
        'rust': 'orange',
        'dent': 'blue',
        'scratch': 'cyan',
        'severe_damage': 'red',
        'missing_part': 'purple'
    }
    
    # –†–∏—Å—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏–∏
    for det in detections:
        x1, y1, x2, y2 = det['bbox']
        w, h = x2 - x1, y2 - y1
        
        color = colors.get(det['class'], 'yellow')
        
        # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        rect = plt.Rectangle((x1, y1), w, h, 
                           linewidth=2, 
                           edgecolor=color, 
                           facecolor='none')
        ax.add_patch(rect)
        
        # –ü–æ–¥–ø–∏—Å—å
        label = f"{det['class']}\n{det['confidence']:.3f}"
        ax.text(x1, y1-10, label,
                fontsize=10,
                color=color,
                bbox=dict(boxstyle="round,pad=0.3",
                         facecolor='white',
                         edgecolor=color,
                         alpha=0.8))
    
    ax.set_title(f"–î–µ—Ç–µ–∫—Ü–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {filename}", fontsize=14)
    ax.axis('off')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    output_filename = f"prediction_{os.path.splitext(filename)[0]}.png"
    output_path = os.path.join(output_dir, output_filename)
    plt.savefig(output_path, dpi=150, bbox_inches='tight')
    plt.close()

def generate_test_report(results_summary, output_dir):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"""
    
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é...")
    
    total_images = len(results_summary['results'])
    total_detections = sum(r['total_detections'] for r in results_summary['results'])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º
    class_stats = {}
    for result in results_summary['results']:
        for det in result['detections']:
            cls = det['class']
            if cls not in class_stats:
                class_stats[cls] = {'count': 0, 'avg_conf': 0, 'confidences': []}
            class_stats[cls]['count'] += 1
            class_stats[cls]['confidences'].append(det['confidence'])
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    for cls, stats in class_stats.items():
        stats['avg_conf'] = np.mean(stats['confidences'])
        stats['max_conf'] = np.max(stats['confidences'])
        stats['min_conf'] = np.min(stats['confidences'])
    
    # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫–∏
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π –ø–æ –∫–ª–∞—Å—Å–∞–º
    if class_stats:
        classes = list(class_stats.keys())
        counts = [class_stats[cls]['count'] for cls in classes]
        colors_list = ['green', 'orange', 'blue', 'cyan', 'red', 'purple']
        
        bars1 = ax1.bar(classes, counts, color=colors_list[:len(classes)])
        ax1.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π –ø–æ –∫–ª–∞—Å—Å–∞–º', fontsize=14)
        ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        ax1.tick_params(axis='x', rotation=45)
        
        for bar, count in zip(bars1, counts):
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                    f'{count}', ha='center', va='bottom')
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∫–ª–∞—Å—Å–∞–º
    if class_stats:
        avg_confs = [class_stats[cls]['avg_conf'] for cls in classes]
        bars2 = ax2.bar(classes, avg_confs, color=colors_list[:len(classes)])
        ax2.set_title('–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∫–ª–∞—Å—Å–∞–º', fontsize=14)
        ax2.set_ylabel('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
        ax2.tick_params(axis='x', rotation=45)
        ax2.set_ylim(0, 1)
        
        for bar, conf in zip(bars2, avg_confs):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height + 0.02,
                    f'{conf:.3f}', ha='center', va='bottom')
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    if class_stats:
        all_confidences = []
        for stats in class_stats.values():
            all_confidences.extend(stats['confidences'])
        
        ax3.hist(all_confidences, bins=20, alpha=0.7, color='skyblue', edgecolor='black')
        ax3.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–∫—Ü–∏–π', fontsize=14)
        ax3.set_xlabel('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
        ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    ax4.axis('tight')
    ax4.axis('off')
    
    table_data = [['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ']]
    table_data.append(['–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', str(total_images)])
    table_data.append(['–í—Å–µ–≥–æ –¥–µ—Ç–µ–∫—Ü–∏–π', str(total_detections)])
    table_data.append(['–°—Ä–µ–¥–Ω–µ–µ –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', f'{total_detections/total_images:.2f}' if total_images > 0 else '0'])
    
    if class_stats:
        table_data.append(['–ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Å–æ–≤', str(len(class_stats))])
        avg_all_conf = np.mean([stats['avg_conf'] for stats in class_stats.values()])
        table_data.append(['–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', f'{avg_all_conf:.3f}'])
    
    table = ax4.table(cellText=table_data,
                     cellLoc='center',
                     loc='center',
                     colWidths=[0.6, 0.4])
    table.auto_set_font_size(False)
    table.set_fontsize(12)
    table.scale(1, 2)
    ax4.set_title('–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', fontsize=14)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    report_path = os.path.join(output_dir, 'test_report.png')
    plt.savefig(report_path, dpi=150, bbox_inches='tight')
    plt.close()
    
    print(f"üìä –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    project_dir = "/Users/bekzat/projects/AIinDrive"
    test_dir = os.path.join(project_dir, "data", "curated")
    output_dir = os.path.join(project_dir, "results", "model_testing")
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ AIinDrive")
    print("=" * 60)
    
    # –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏
    model_path = find_best_model(project_dir)
    
    if not model_path:
        print("‚ùå –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: python scripts/simple_train.py")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model_path}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    results_summary = test_model_on_images(model_path, test_dir, output_dir)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
    generate_test_report(results_summary, output_dir)
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –¢–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(results_summary['results'])}")
    total_dets = sum(r['total_detections'] for r in results_summary['results'])
    print(f"  –í—Å–µ–≥–æ –¥–µ—Ç–µ–∫—Ü–∏–π: {total_dets}")
    
    if results_summary['results']:
        avg_dets = total_dets / len(results_summary['results'])
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {avg_dets:.2f}")

if __name__ == "__main__":
    main()
