#!/usr/bin/env python3
"""–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""

import os
import cv2
import json
import numpy as np
from pathlib import Path
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import Rectangle

def visualize_coco_annotations(data_dir: str, annotation_file: str, output_dir: str):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è COCO –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π"""
    
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π...")
    
    # –°–æ–∑–¥–∞—ë–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.makedirs(output_dir, exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    with open(annotation_file, 'r', encoding='utf-8') as f:
        coco_data = json.load(f)
    
    # –°–æ–∑–¥–∞—ë–º –º–∞–ø–ø–∏–Ω–≥–∏
    images_map = {img['id']: img for img in coco_data['images']}
    categories_map = {cat['id']: cat['name'] for cat in coco_data['categories']}
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    annotations_by_image = {}
    for ann in coco_data['annotations']:
        if ann['image_id'] not in annotations_by_image:
            annotations_by_image[ann['image_id']] = []
        annotations_by_image[ann['image_id']].append(ann)
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    colors = {
        'no_damage': (0, 255, 0),      # –ó–µ–ª—ë–Ω—ã–π
        'rust': (0, 165, 255),         # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        'dent': (255, 0, 0),           # –°–∏–Ω–∏–π  
        'scratch': (255, 255, 0),      # –ì–æ–ª—É–±–æ–π
        'severe_damage': (0, 0, 255),  # –ö—Ä–∞—Å–Ω—ã–π
        'missing_part': (128, 0, 128)  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
    }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    for img_id, img_info in images_map.items():
        img_path = os.path.join(data_dir, img_info['file_name'])
        
        if not os.path.exists(img_path):
            print(f"‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {img_path}")
            continue
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = cv2.imread(img_path)
        if image is None:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {img_path}")
            continue
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR -> RGB –¥–ª—è matplotlib
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        
        # –°–æ–∑–¥–∞—ë–º —Ñ–∏–≥—É—Ä—É
        fig, ax = plt.subplots(1, 1, figsize=(12, 8))
        ax.imshow(image_rgb)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        if img_id in annotations_by_image:
            for ann in annotations_by_image[img_id]:
                x, y, w, h = ann['bbox']
                category_name = categories_map[ann['category_id']]
                color = colors.get(category_name, (255, 255, 255))
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–≤–µ—Ç –¥–ª—è matplotlib (0-1)
                color_norm = tuple(c/255.0 for c in color)
                
                # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
                rect = Rectangle((x, y), w, h, 
                               linewidth=2, 
                               edgecolor=color_norm, 
                               facecolor='none')
                ax.add_patch(rect)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
                damage_level = ann.get('damage_level', 'N/A')
                confidence = ann.get('attributes', {}).get('confidence', 0.0)
                label = f"{category_name}\nLevel: {damage_level}\nConf: {confidence:.2f}"
                
                ax.text(x, y-10, label, 
                       fontsize=10, 
                       color=color_norm,
                       bbox=dict(boxstyle="round,pad=0.3", 
                                facecolor='white', 
                                edgecolor=color_norm,
                                alpha=0.8))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ax.set_title(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img_info['file_name']}", fontsize=14)
        ax.axis('off')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        output_filename = f"visualization_{os.path.splitext(img_info['file_name'])[0]}.png"
        output_path = os.path.join(output_dir, output_filename)
        plt.savefig(output_path, dpi=150, bbox_inches='tight')
        plt.close()
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
    
    # –°–æ–∑–¥–∞—ë–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    create_annotation_summary(coco_data, output_dir)

def create_annotation_summary(coco_data, output_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º"""
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_stats = {}
    damage_level_stats = {}
    
    for cat in coco_data['categories']:
        category_stats[cat['name']] = {'count': 0, 'total_area': 0}
    
    for ann in coco_data['annotations']:
        cat_name = next(cat['name'] for cat in coco_data['categories'] 
                       if cat['id'] == ann['category_id'])
        
        category_stats[cat_name]['count'] += 1
        category_stats[cat_name]['total_area'] += ann['area']
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
        damage_level = ann.get('damage_level', 0)
        if damage_level not in damage_level_stats:
            damage_level_stats[damage_level] = 0
        damage_level_stats[damage_level] += 1
    
    # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = list(category_stats.keys())
    counts = [category_stats[cat]['count'] for cat in categories]
    
    bars1 = ax1.bar(categories, counts, color=['green', 'orange', 'blue', 'cyan', 'red', 'purple'])
    ax1.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontsize=14)
    ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    ax1.tick_params(axis='x', rotation=45)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, count in zip(bars1, counts):
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                f'{count}', ha='center', va='bottom')
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    areas = [category_stats[cat]['total_area'] for cat in categories]
    bars2 = ax2.bar(categories, areas, color=['green', 'orange', 'blue', 'cyan', 'red', 'purple'])
    ax2.set_title('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontsize=14)
    ax2.set_ylabel('–ü–ª–æ—â–∞–¥—å (–ø–∏–∫—Å–µ–ª–∏)')
    ax2.tick_params(axis='x', rotation=45)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, area in zip(bars2, areas):
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height + 100,
                f'{int(area)}', ha='center', va='bottom')
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
    levels = list(damage_level_stats.keys())
    level_counts = list(damage_level_stats.values())
    level_labels = [f'–£—Ä–æ–≤–µ–Ω—å {level}' for level in levels]
    
    colors3 = ['green', 'yellow', 'orange', 'red'][:len(levels)]
    ax3.pie(level_counts, labels=level_labels, colors=colors3, autopct='%1.1f%%')
    ax3.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π', fontsize=14)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    ax4.axis('tight')
    ax4.axis('off')
    
    table_data = [['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å']]
    for cat, stats in category_stats.items():
        avg_area = stats['total_area'] / stats['count'] if stats['count'] > 0 else 0
        table_data.append([cat, stats['count'], f"{avg_area:.0f}"])
    
    table = ax4.table(cellText=table_data, 
                     cellLoc='center',
                     loc='center',
                     colWidths=[0.4, 0.2, 0.3])
    table.auto_set_font_size(False)
    table.set_fontsize(10)
    table.scale(1, 2)
    ax4.set_title('–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', fontsize=14)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    plt.tight_layout()
    summary_path = os.path.join(output_dir, 'annotation_statistics.png')
    plt.savefig(summary_path, dpi=150, bbox_inches='tight')
    plt.close()
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {summary_path}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    project_dir = "/Users/bekzat/projects/AIinDrive"
    data_dir = os.path.join(project_dir, "data", "curated")
    annotation_file = os.path.join(project_dir, "data", "annotations", "coco", "instances.json")
    output_dir = os.path.join(project_dir, "visualization", "annotations")
    
    print("üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π AIinDrive")
    print("=" * 50)
    
    if not os.path.exists(annotation_file):
        print(f"‚ùå –§–∞–π–ª –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {annotation_file}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python scripts/prepare_training.py")
        return
    
    # –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    visualize_coco_annotations(data_dir, annotation_file, output_dir)
    
    print("\n" + "=" * 50)
    print("‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –∏—Ö")
    print("üí° –ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: python scripts/train.py")

if __name__ == "__main__":
    main()
