#!/usr/bin/env python3
"""–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""

import os
import cv2
import numpy as np
from pathlib import Path
import matplotlib.pyplot as plt
from ultralytics import YOLO
import json
from datetime import datetime

def test_model_with_different_thresholds(model_path: str, test_dir: str, output_dir: str):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏: {model_path}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    model = YOLO(model_path)
    
    # –°–æ–∑–¥–∞—ë–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.makedirs(output_dir, exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_files = [f for f in os.listdir(test_dir) 
                  if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    
    if not image_files:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(image_files)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
    thresholds = [0.01, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3]
    results_by_threshold = {}
    
    for threshold in thresholds:
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ—Ä–æ–≥–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {threshold}")
        results_by_threshold[threshold] = []
        
        for img_file in image_files:
            img_path = os.path.join(test_dir, img_file)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = cv2.imread(img_path)
            if image is None:
                continue
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            results = model(img_path, conf=threshold, iou=0.45, verbose=False)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            detections = []
            if results and len(results) > 0:
                result = results[0]
                
                if result.boxes is not None:
                    boxes = result.boxes
                    for i in range(len(boxes)):
                        box = boxes.xyxy[i].cpu().numpy()
                        conf = float(boxes.conf[i].cpu().numpy())
                        cls = int(boxes.cls[i].cpu().numpy())
                        
                        # –ò–º–µ–Ω–∞ –∫–ª–∞—Å—Å–æ–≤
                        class_names = {
                            0: 'no_damage',
                            1: 'rust',
                            2: 'dent',
                            3: 'scratch', 
                            4: 'severe_damage',
                            5: 'missing_part'
                        }
                        
                        class_name = class_names.get(cls, f'class_{cls}')
                        
                        detections.append({
                            'class': class_name,
                            'confidence': conf,
                            'bbox': box.tolist()
                        })
            
            results_by_threshold[threshold].append({
                'image': img_file,
                'detections': detections,
                'total_detections': len(detections)
            })
            
            if len(detections) > 0:
                print(f"  üì∏ {img_file}: –Ω–∞–π–¥–µ–Ω–æ {len(detections)} –æ–±—ä–µ–∫—Ç–æ–≤")
                for det in detections:
                    print(f"    - {det['class']}: {det['confidence']:.3f}")
    
    # –°–æ–∑–¥–∞—ë–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    create_threshold_analysis(results_by_threshold, output_dir)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    best_threshold = find_best_threshold(results_by_threshold)
    print(f"\nüéØ –õ—É—á—à–∏–π –ø–æ—Ä–æ–≥: {best_threshold}")
    
    visualize_best_results(model, test_dir, best_threshold, output_dir)
    
    return results_by_threshold

def find_best_threshold(results_by_threshold):
    """–ù–∞–π—Ç–∏ –ª—É—á—à–∏–π –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–∫—Ü–∏–π"""
    
    best_threshold = 0.25
    max_detections = 0
    
    for threshold, results in results_by_threshold.items():
        total_detections = sum(r['total_detections'] for r in results)
        if total_detections > max_detections:
            max_detections = total_detections
            best_threshold = threshold
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥
    if max_detections == 0:
        best_threshold = min(results_by_threshold.keys())
    
    return best_threshold

def create_threshold_analysis(results_by_threshold, output_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –ø–æ—Ä–æ–≥–∞–º"""
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    thresholds = sorted(results_by_threshold.keys())
    total_detections = []
    
    for threshold in thresholds:
        total = sum(r['total_detections'] for r in results_by_threshold[threshold])
        total_detections.append(total)
    
    # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π –ø–æ –ø–æ—Ä–æ–≥–∞–º
    ax1.plot(thresholds, total_detections, 'b-o', linewidth=2, markersize=8)
    ax1.set_xlabel('–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏')
    ax1.set_ylabel('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π')
    ax1.set_title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–∫—Ü–∏–π –æ—Ç –ø–æ—Ä–æ–≥–∞')
    ax1.grid(True, alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Ç–æ—á–∫–∏
    for i, (threshold, count) in enumerate(zip(thresholds, total_detections)):
        ax1.annotate(f'{count}', (threshold, count), 
                    textcoords="offset points", xytext=(0,10), ha='center')
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    images_with_detections = []
    for threshold in thresholds:
        count = sum(1 for r in results_by_threshold[threshold] if r['total_detections'] > 0)
        images_with_detections.append(count)
    
    ax2.bar(range(len(thresholds)), images_with_detections, 
           color='skyblue', edgecolor='navy', alpha=0.7)
    ax2.set_xlabel('–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏')
    ax2.set_ylabel('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏')
    ax2.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏')
    ax2.set_xticks(range(len(thresholds)))
    ax2.set_xticklabels([f'{t:.2f}' for t in thresholds], rotation=45)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, count in enumerate(images_with_detections):
        ax2.text(i, count + 0.1, str(count), ha='center')
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    analysis_path = os.path.join(output_dir, 'threshold_analysis.png')
    plt.savefig(analysis_path, dpi=150, bbox_inches='tight')
    plt.close()
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–æ—Ä–æ–≥–∞–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {analysis_path}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    detailed_results = {
        'thresholds_tested': thresholds,
        'total_detections_by_threshold': dict(zip(thresholds, total_detections)),
        'images_with_detections': dict(zip(thresholds, images_with_detections)),
        'detailed_results': results_by_threshold
    }
    
    results_path = os.path.join(output_dir, 'detailed_threshold_results.json')
    with open(results_path, 'w', encoding='utf-8') as f:
        json.dump(detailed_results, f, indent=2, ensure_ascii=False)
    
    print(f"üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results_path}")

def visualize_best_results(model, test_dir, threshold, output_dir):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ª—É—á—à–∏–º –ø–æ—Ä–æ–≥–æ–º"""
    
    print(f"üé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–æ—Ä–æ–≥–æ–º {threshold}")
    
    image_files = [f for f in os.listdir(test_dir) 
                  if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    
    for img_file in image_files:
        img_path = os.path.join(test_dir, img_file)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = cv2.imread(img_path)
        if image is None:
            continue
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        results = model(img_path, conf=threshold, iou=0.45, verbose=False)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR –≤ RGB
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        
        # –°–æ–∑–¥–∞—ë–º —Ñ–∏–≥—É—Ä—É
        fig, ax = plt.subplots(1, 1, figsize=(12, 8))
        ax.imshow(image_rgb)
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤
        colors = {
            'no_damage': 'green',
            'rust': 'orange',
            'dent': 'blue',
            'scratch': 'cyan',
            'severe_damage': 'red',
            'missing_part': 'purple'
        }
        
        detections_count = 0
        
        # –†–∏—Å—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏–∏
        if results and len(results) > 0:
            result = results[0]
            
            if result.boxes is not None:
                boxes = result.boxes
                for i in range(len(boxes)):
                    box = boxes.xyxy[i].cpu().numpy()
                    conf = float(boxes.conf[i].cpu().numpy())
                    cls = int(boxes.cls[i].cpu().numpy())
                    
                    # –ò–º–µ–Ω–∞ –∫–ª–∞—Å—Å–æ–≤
                    class_names = {
                        0: 'no_damage',
                        1: 'rust',
                        2: 'dent',
                        3: 'scratch', 
                        4: 'severe_damage',
                        5: 'missing_part'
                    }
                    
                    class_name = class_names.get(cls, f'class_{cls}')
                    color = colors.get(class_name, 'yellow')
                    
                    x1, y1, x2, y2 = box
                    w, h = x2 - x1, y2 - y1
                    
                    # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
                    rect = plt.Rectangle((x1, y1), w, h, 
                                       linewidth=3, 
                                       edgecolor=color, 
                                       facecolor='none')
                    ax.add_patch(rect)
                    
                    # –ü–æ–¥–ø–∏—Å—å
                    label = f"{class_name}\n{conf:.3f}"
                    ax.text(x1, y1-10, label,
                            fontsize=12,
                            color=color,
                            fontweight='bold',
                            bbox=dict(boxstyle="round,pad=0.3",
                                     facecolor='white',
                                     edgecolor=color,
                                     alpha=0.9))
                    
                    detections_count += 1
        
        title = f"{img_file}\n–ü–æ—Ä–æ–≥: {threshold}, –ù–∞–π–¥–µ–Ω–æ: {detections_count} –æ–±—ä–µ–∫—Ç–æ–≤"
        ax.set_title(title, fontsize=14)
        ax.axis('off')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        output_filename = f"best_prediction_{os.path.splitext(img_file)[0]}.png"
        output_path = os.path.join(output_dir, output_filename)
        plt.savefig(output_path, dpi=150, bbox_inches='tight')
        plt.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    project_dir = "/Users/bekzat/projects/AIinDrive"
    test_dir = os.path.join(project_dir, "data", "curated")
    output_dir = os.path.join(project_dir, "results", "enhanced_testing")
    model_path = os.path.join(project_dir, "results", "yolo_training", "damage_detection_v1", "weights", "best.pt")
    
    print("üß™ –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ AIinDrive")
    print("=" * 80)
    
    if not os.path.exists(model_path):
        print("‚ùå –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model_path}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
    results = test_model_with_different_thresholds(model_path, test_dir, output_dir)
    
    print("\n" + "=" * 80)
    print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
    
    # –°–≤–æ–¥–∫–∞
    print("\nüìä –°–≤–æ–¥–∫–∞ –ø–æ –ø–æ—Ä–æ–≥–∞–º:")
    for threshold, threshold_results in results.items():
        total_dets = sum(r['total_detections'] for r in threshold_results)
        images_with_dets = sum(1 for r in threshold_results if r['total_detections'] > 0)
        print(f"  –ü–æ—Ä–æ–≥ {threshold:4.2f}: {total_dets:2d} –¥–µ—Ç–µ–∫—Ü–∏–π –≤ {images_with_dets} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö")

if __name__ == "__main__":
    main()
