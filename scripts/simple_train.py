#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º YOLOv8"""

import os
import sys
from pathlib import Path
import yaml
import torch
from ultralytics import YOLO
import shutil

def setup_yolo_dataset(project_dir: str):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è YOLOv8"""
    
    print("üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è YOLOv8...")
    
    # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è YOLOv8
    yolo_dir = os.path.join(project_dir, "data", "yolo_dataset")
    train_dir = os.path.join(yolo_dir, "images", "train")
    val_dir = os.path.join(yolo_dir, "images", "val")
    train_labels_dir = os.path.join(yolo_dir, "labels", "train")
    val_labels_dir = os.path.join(yolo_dir, "labels", "val")
    
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs(train_dir, exist_ok=True)
    os.makedirs(val_dir, exist_ok=True)
    os.makedirs(train_labels_dir, exist_ok=True)
    os.makedirs(val_labels_dir, exist_ok=True)
    
    # –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    source_dir = os.path.join(project_dir, "data", "curated")
    yolo_annotations_dir = os.path.join(project_dir, "data", "annotations", "yolo")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    image_files = [f for f in os.listdir(source_dir) 
                  if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ train/val
    train_split = int(len(image_files) * 0.7)
    train_files = image_files[:train_split]
    val_files = image_files[train_split:]
    
    print(f"üìä Train: {len(train_files)}, Val: {len(val_files)}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    for filename in train_files:
        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        src_img = os.path.join(source_dir, filename)
        dst_img = os.path.join(train_dir, filename)
        shutil.copy2(src_img, dst_img)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
        txt_filename = os.path.splitext(filename)[0] + '.txt'
        src_txt = os.path.join(yolo_annotations_dir, txt_filename)
        dst_txt = os.path.join(train_labels_dir, txt_filename)
        if os.path.exists(src_txt):
            shutil.copy2(src_txt, dst_txt)
        else:
            # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
            open(dst_txt, 'w').close()
    
    for filename in val_files:
        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        src_img = os.path.join(source_dir, filename)
        dst_img = os.path.join(val_dir, filename)
        shutil.copy2(src_img, dst_img)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
        txt_filename = os.path.splitext(filename)[0] + '.txt'
        src_txt = os.path.join(yolo_annotations_dir, txt_filename)
        dst_txt = os.path.join(val_labels_dir, txt_filename)
        if os.path.exists(src_txt):
            shutil.copy2(src_txt, dst_txt)
        else:
            # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
            open(dst_txt, 'w').close()
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª dataset.yaml –¥–ª—è YOLOv8
    dataset_config = {
        'path': yolo_dir,
        'train': 'images/train',
        'val': 'images/val',
        'nc': 6,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤
        'names': {
            0: 'no_damage',
            1: 'rust',
            2: 'dent', 
            3: 'scratch',
            4: 'severe_damage',
            5: 'missing_part'
        }
    }
    
    dataset_yaml_path = os.path.join(yolo_dir, "dataset.yaml")
    with open(dataset_yaml_path, 'w') as f:
        yaml.dump(dataset_config, f, default_flow_style=False)
    
    print(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω: {yolo_dir}")
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {dataset_yaml_path}")
    
    return dataset_yaml_path

def train_yolo_model(dataset_yaml_path: str, project_dir: str):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ YOLOv8"""
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ YOLOv8...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    model = YOLO('yolov8n.pt')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º nano –º–æ–¥–µ–ª—å –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
    training_args = {
        'data': dataset_yaml_path,
        'epochs': 100,
        'imgsz': 640,
        'batch': 2,  # –ú–∞–ª–µ–Ω—å–∫–∏–π batch –¥–ª—è 7 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        'patience': 20,
        'save': True,
        'cache': False,
        'device': '0' if torch.cuda.is_available() else 'cpu',
        'workers': 2,
        'project': os.path.join(project_dir, 'results', 'yolo_training'),
        'name': 'damage_detection_v1',
        'exist_ok': True,
        
        # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
        'flipud': 0.2,
        'fliplr': 0.5,
        'degrees': 10.0,
        'translate': 0.1,
        'scale': 0.2,
        'shear': 2.0,
        'perspective': 0.0,
        'hsv_h': 0.1,
        'hsv_s': 0.3,
        'hsv_v': 0.3,
        'mixup': 0.1,
        'mosaic': 0.3,
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
        'lr0': 0.001,
        'lrf': 0.01,
        'momentum': 0.937,
        'weight_decay': 0.0005,
        'warmup_epochs': 3.0,
        'warmup_momentum': 0.8,
        'warmup_bias_lr': 0.1,
    }
    
    print("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è:")
    print(f"  –ú–æ–¥–µ–ª—å: YOLOv8n")
    print(f"  –≠–ø–æ—Ö–∏: {training_args['epochs']}")
    print(f"  Batch size: {training_args['batch']}")
    print(f"  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {training_args['device']}")
    print(f"  –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {training_args['imgsz']}")
    
    # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
    try:
        results = model.train(**training_args)
        print("üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—É—Ç—å –∫ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
        best_model_path = os.path.join(
            project_dir, 'results', 'yolo_training', 
            'damage_detection_v1', 'weights', 'best.pt'
        )
        
        print(f"üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model_path}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        if os.path.exists(best_model_path):
            print("üîç –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
            best_model = YOLO(best_model_path)
            val_results = best_model.val(data=dataset_yaml_path)
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        return best_model_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {str(e)}")
        raise

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    project_dir = "/Users/bekzat/projects/AIinDrive"
    
    print("üöÄ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π AIinDrive")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(os.path.join(project_dir, "data", "curated")):
        print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/prepare_training.py")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CUDA
    if torch.cuda.is_available():
        print(f"üî• CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.get_device_name()}")
    else:
        print("üíª –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
    
    try:
        # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
        dataset_yaml_path = setup_yolo_dataset(project_dir)
        
        # 2. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        best_model_path = train_yolo_model(dataset_yaml_path, project_dir)
        
        print("\n" + "=" * 60)
        print("üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model_path}")
        print("\nüìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ results/yolo_training/")
        print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/test_trained_model.py")
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
