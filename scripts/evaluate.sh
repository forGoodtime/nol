#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ

set -e  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
MODEL_PATH="experiments/best_model.pt"
CONFIG_PATH="src/config/default.yaml"
TEST_DATA_DIR="data/curated"
OUTPUT_DIR="experiments/evaluation"
BATCH_SIZE=32

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        -m|--model)
            MODEL_PATH="$2"
            shift 2
            ;;
        -c|--config)
            CONFIG_PATH="$2"
            shift 2
            ;;
        -d|--data)
            TEST_DATA_DIR="$2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        -b|--batch-size)
            BATCH_SIZE="$2"
            shift 2
            ;;
        -h|--help)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [OPTIONS]"
            echo "OPTIONS:"
            echo "  -m, --model PATH       –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $MODEL_PATH)"
            echo "  -c, --config PATH      –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $CONFIG_PATH)"
            echo "  -d, --data PATH        –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $TEST_DATA_DIR)"
            echo "  -o, --output PATH      –ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $OUTPUT_DIR)"
            echo "  -b, --batch-size N     –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $BATCH_SIZE)"
            echo "  -h, --help             –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            exit 0
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
            exit 1
            ;;
    esac
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
if [ ! -f "$MODEL_PATH" ]; then
    echo "–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ $MODEL_PATH"
    exit 1
fi

if [ ! -f "$CONFIG_PATH" ]; then
    echo "–û—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ $CONFIG_PATH"
    exit 1
fi

if [ ! -d "$TEST_DATA_DIR" ]; then
    echo "–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $TEST_DATA_DIR"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
mkdir -p "$OUTPUT_DIR"

echo "=========================================="
echo "–û–¶–ï–ù–ö–ê –ú–û–î–ï–õ–ò –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ü–û–í–†–ï–ñ–î–ï–ù–ò–ô"
echo "=========================================="
echo "–ú–æ–¥–µ–ª—å: $MODEL_PATH"
echo "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: $CONFIG_PATH"
echo "–î–∞–Ω–Ω—ã–µ: $TEST_DATA_DIR"
echo "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: $OUTPUT_DIR"
echo "–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: $BATCH_SIZE"
echo "=========================================="

# –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
echo "üîç –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
python src/inference/batch_infer.py \
    --input "$TEST_DATA_DIR" \
    --model "$MODEL_PATH" \
    --config "$CONFIG_PATH" \
    --output "$OUTPUT_DIR/predictions" \
    --batch-size "$BATCH_SIZE" \
    --save-visualizations

# –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å ground truth)
if [ -f "data/splits/test.txt" ] && [ -f "data/annotations/coco/instances.json" ]; then
    echo "üìä –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫..."
    python scripts/compute_metrics.py \
        --predictions "$OUTPUT_DIR/predictions" \
        --ground-truth "data/annotations/coco/instances.json" \
        --test-split "data/splits/test.txt" \
        --output "$OUTPUT_DIR/metrics.json"
fi

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
echo "üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞..."
python scripts/generate_report.py \
    --predictions-dir "$OUTPUT_DIR/predictions" \
    --metrics-file "$OUTPUT_DIR/metrics.json" \
    --output "$OUTPUT_DIR/evaluation_report.html"

echo "‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $OUTPUT_DIR"
echo "–û—Ç—á–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: $OUTPUT_DIR/evaluation_report.html"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
if [ -f "$OUTPUT_DIR/metrics.json" ]; then
    echo ""
    echo "üìà –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:"
    python -c "
import json
with open('$OUTPUT_DIR/metrics.json', 'r') as f:
    metrics = json.load(f)
    
print(f\"  –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {metrics.get('accuracy', 'N/A'):.3f}\")
print(f\"  –°—Ä–µ–¥–Ω–∏–π F1-score: {metrics.get('f1_macro', 'N/A'):.3f}\")
print(f\"  Recall –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {metrics.get('critical_recall', 'N/A'):.3f}\")
print(f\"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {metrics.get('total_images', 'N/A')}\")
"
fi
