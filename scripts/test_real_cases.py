#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
"""

import argparse
import json
import os
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

import cv2
import numpy as np
import torch
from PIL import Image

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
import sys
sys.path.append(str(Path(__file__).parent.parent / 'src'))

try:
    from utils.shadow_removal import ShadowRemover
except ImportError:
    print("‚ö†Ô∏è Shadow removal module not available, using basic preprocessing")
    ShadowRemover = None

try:
    from inference.infer import DamageInference
except ImportError:
    print("‚ö†Ô∏è Inference module not available, using mock inference")
    DamageInference = None

try:
    from cv_analysis.comparison_visualizer import ComparisonVisualizer
    CV_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è CV analysis module not available")
    CV_AVAILABLE = False


class RealCasesTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    
    def __init__(self, model_path: Optional[str] = None, use_cv_analysis: bool = True):
        self.model_path = model_path
        self.use_cv_analysis = use_cv_analysis and CV_AVAILABLE
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º shadow remover –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if ShadowRemover:
            self.shadow_remover = ShadowRemover()
        else:
            self.shadow_remover = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º inference engine –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        self.inference_engine = None
        if DamageInference and model_path and os.path.exists(model_path):
            self.inference_engine = DamageInference(model_path)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CV –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        if self.use_cv_analysis:
            self.cv_comparator = ComparisonVisualizer()
            print("‚úÖ CV –∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–µ–Ω")
        else:
            self.cv_comparator = None
        
        self.damage_classes = {
            0: "no_damage",
            1: "light_damage", 
            2: "moderate_damage",
            3: "severe_damage"
        }
        
    def process_image(self, image_path: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å CV –∏ ML –∞–Ω–∞–ª–∏–∑–æ–º"""
        start_time = time.time()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = cv2.imread(image_path)
        if image is None:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
        
        original_shape = image.shape[:2]
        
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if self.shadow_remover:
            processed_image = self.shadow_remover.remove_shadows(image)
        else:
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ shadow removal
            processed_image = cv2.GaussianBlur(image, (3, 3), 0)
            processed_image = cv2.convertScaleAbs(processed_image, alpha=1.1, beta=10)
        
        # CV + ML –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.use_cv_analysis and self.cv_comparator:
            try:
                combined_results = self.cv_comparator.analyze_with_both_methods(
                    processed_image, self.model_path
                )
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                ml_results = combined_results['ml_results']
                cv_results = combined_results['cv_results']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                filename_base = Path(image_path).stem
                output_dir = Path(image_path).parent.parent / "results" / "cv_analysis" / filename_base
                
                saved_files = self.cv_comparator.save_comparison_results(
                    output_dir, filename_base, processed_image, combined_results
                )
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ CV –∞–Ω–∞–ª–∏–∑–∞: {e}")
                # Fallback –Ω–∞ mock inference
                ml_results = self._mock_inference(processed_image)
                cv_results = None
                saved_files = {}
        else:
            # –¢–æ–ª—å–∫–æ ML –∏–Ω—Ñ–µ—Ä–µ–Ω—Å (–∏–ª–∏ mock)
            if self.inference_engine:
                ml_results = self.inference_engine.predict(processed_image)
            else:
                ml_results = self._mock_inference(processed_image)
            
            cv_results = None
            saved_files = {}
        
        processing_time = time.time() - start_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "image_name": os.path.basename(image_path),
            "image_path": image_path,
            "predictions": {
                "damage_level": ml_results.get("damage_level", 0),
                "confidence": ml_results.get("confidence", 0.5),
                "damage_types": ml_results.get("damage_types", []),
                "bboxes": ml_results.get("bboxes", []),
                "processing_time": round(processing_time, 3)
            },
            "preprocessing": {
                "shadow_removed": self.shadow_remover is not None,
                "original_size": original_shape,
                "processed_size": processed_image.shape[:2]
            },
            "metadata": {
                "model_path": self.model_path or "mock_model",
                "timestamp": datetime.now().isoformat(),
                "image_size": original_shape,
                "cv_analysis_used": self.use_cv_analysis
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º CV —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if cv_results:
            result["cv_analysis"] = {
                "damage_regions": len(cv_results["damage_regions"]),
                "overall_damage_level": cv_results["overall_damage_level"],
                "damage_counts": cv_results["damage_counts"],
                "total_damaged_area": cv_results["total_damaged_area"]
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        if saved_files:
            result["saved_files"] = saved_files
        
        return result
    
    def _mock_inference(self, image: np.ndarray) -> Dict:
        """–ò–º–∏—Ç–∞—Ü–∏—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –¥–ª—è –¥–µ–º–æ"""
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
        laplacian_var = cv2.Laplacian(gray, cv2.CV_64F).var()
        mean_intensity = np.mean(gray)
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏
        if laplacian_var < 100:
            damage_level = 0
            confidence = 0.95
            damage_types = []
        elif laplacian_var < 500:
            damage_level = 1
            confidence = 0.78
            damage_types = ["light_scratches"]
        elif mean_intensity < 80:
            damage_level = 3
            confidence = 0.91
            damage_types = ["severe_damage", "missing_part"]
        else:
            damage_level = 2
            confidence = 0.83
            damage_types = ["rust", "dent"]
        
        # –§–∏–∫—Ç–∏–≤–Ω—ã–µ bounding boxes
        h, w = image.shape[:2]
        bboxes = []
        if damage_level > 0:
            bboxes.append({
                "bbox": [w//4, h//4, w//2, h//2],
                "confidence": confidence,
                "class": self.damage_classes[damage_level]
            })
        
        return {
            "damage_level": damage_level,
            "confidence": confidence,
            "damage_types": damage_types,
            "bboxes": bboxes
        }
    
    def test_directory(self, input_dir: str, output_dir: str) -> List[Dict]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ"""
        input_path = Path(input_dir)
        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        supported_formats = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff'}
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_files = []
        for ext in supported_formats:
            image_files.extend(input_path.glob(f"*{ext}"))
            image_files.extend(input_path.glob(f"*{ext.upper()}"))
        
        if not image_files:
            print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ {input_dir}")
            return []
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        results = []
        for i, image_file in enumerate(image_files, 1):
            print(f"üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ({i}/{len(image_files)}): {image_file.name}")
            
            try:
                result = self.process_image(str(image_file))
                results.append(result)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result_file = output_path / f"{image_file.stem}_result.json"
                with open(result_file, 'w', encoding='utf-8') as f:
                    json.dump(result, f, indent=2, ensure_ascii=False)
                    
                print(f"   ‚úÖ Damage level: {result['predictions']['damage_level']} "
                      f"(confidence: {result['predictions']['confidence']:.3f})")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {image_file.name}: {e}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
        summary_file = output_path / "batch_results.json"
        with open(summary_file, 'w', encoding='utf-8') as f:
            json.dump({
                "summary": {
                    "total_images": len(image_files),
                    "processed_successfully": len(results),
                    "failed": len(image_files) - len(results),
                    "processing_date": datetime.now().isoformat()
                },
                "results": results
            }, f, indent=2, ensure_ascii=False)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
        return results


def main():
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å CV –∞–Ω–∞–ª–∏–∑–æ–º")
    parser.add_argument("--input", choices=["production", "validation", "all"], 
                       default="production",
                       help="–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")
    parser.add_argument("--model", type=str, default=None,
                       help="–ü—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
    parser.add_argument("--custom-input", type=str, default=None,
                       help="–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    parser.add_argument("--output-dir", type=str, default=None,
                       help="–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    parser.add_argument("--no-cv-analysis", action="store_true",
                       help="–û—Ç–∫–ª—é—á–∏—Ç—å CV –∞–Ω–∞–ª–∏–∑")
    
    args = parser.parse_args()
    
    # –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
    project_root = Path(__file__).parent.parent
    data_root = project_root / "data" / "real_test_cases"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    use_cv = not args.no_cv_analysis
    tester = RealCasesTester(args.model, use_cv_analysis=use_cv)
    
    if CV_AVAILABLE and use_cv:
        print("üî¨ CV –∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–µ–Ω - –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –¥–µ—Ç–∞–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    else:
        print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ ML –∞–Ω–∞–ª–∏–∑")
    
    if args.custom_input:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –ø–∞–ø–∫—É
        input_dir = args.custom_input
        output_dir = args.output_dir or str(data_root / "results" / "custom")
        
        print(f"üöó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–∞–ø–∫–∏: {input_dir}")
        results = tester.test_directory(input_dir, output_dir)
        
    elif args.input == "all":
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–∞–ø–∫–∏
        all_results = []
        
        for folder in ["production", "validation"]:
            input_dir = str(data_root / folder)
            output_dir = str(data_root / "results" / f"{folder}_results")
            
            if os.path.exists(input_dir):
                print(f"\nüöó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {folder}...")
                results = tester.test_directory(input_dir, output_dir)
                all_results.extend(results)
            else:
                print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {input_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        print(f"\nüìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(all_results)}")
        
    else:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞–ø–∫—É
        input_dir = str(data_root / args.input)
        output_dir = args.output_dir or str(data_root / "results" / f"{args.input}_results")
        
        if not os.path.exists(input_dir):
            print(f"‚ùå –ü–∞–ø–∫–∞ {input_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            print(f"üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
            print(f"   mkdir -p {input_dir}")
            print(f"   cp /path/to/your/images/* {input_dir}/")
            return
        
        print(f"üöó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {args.input}...")
        results = tester.test_directory(input_dir, output_dir)
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    if CV_AVAILABLE and use_cv:
        print("üî¨ CV –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print("   ‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: *_cv_ml_comparison.png")
        print("   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: *_detailed_report.txt")
        print("   ‚Ä¢ –¢–µ–ø–ª–æ–≤—ã–µ –∫–∞—Ä—Ç—ã: *_heatmap.jpg")
        print("   ‚Ä¢ –ú–∞—Å–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: *_damage_mask.jpg")
    
    print(f"üí° –î–ª—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print(f"   python scripts/analyze_real_results.py")


if __name__ == "__main__":
    main()
